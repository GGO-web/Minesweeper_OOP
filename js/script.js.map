{"version":3,"sources":["game-settings.js","modals.js","script.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"script.js","sourcesContent":["// overlay toogle function\r\nfunction toogleOverlay() {\r\n   const siteContainer = document.querySelector(\".site-container\");\r\n   siteContainer.classList.toggle(\"has-overlay\");\r\n}\r\n// show settings function\r\nfunction showSettings() {\r\n   const settings = document.querySelector(\".settings\");\r\n   settings.classList.toggle(\"is-showed\");\r\n}\r\n\r\nconst settingsButton = document.querySelector(\".options__button--settings\");\r\nsettingsButton.addEventListener(\"click\", () => {\r\n   settingsButton.classList.toggle(\"active\");\r\n\r\n   showSettings();\r\n   toogleOverlay();\r\n\r\n   if (settingsButton.classList.contains(\"active\")) {\r\n      timer.stop();\r\n   } else if (game.isStarted && !game.isEnded && !game.isOver) {\r\n      timer.start();\r\n   }\r\n});\r\n\r\n// click on overlay and close setting menu event\r\nwindow.addEventListener(\"click\", function (event) {\r\n   const targetELement = event.target;\r\n   if (targetELement && targetELement.classList.contains(\"has-overlay\")) {\r\n      settingsButton.click();\r\n   }\r\n});\r\n","const GameWinModal = document.querySelector(\".game-win\");\r\nconst GameOverModal = document.querySelector(\".game-over\");\r\nconst toggleGameWinModal = () => {\r\n   GameWinModal.classList.toggle(\"is-showed\");\r\n};\r\nconst toggleGameOverModal = () => {\r\n   GameOverModal.classList.toggle(\"is-showed\");\r\n};\r\nconst closeModals = () => {\r\n   GameWinModal.classList.remove(\"is-showed\");\r\n   GameOverModal.classList.remove(\"is-showed\");\r\n}\r\n\r\nconst GameWinButton = document.querySelector(\".game-win__button\");\r\nGameWinButton.addEventListener(\"click\", function (event) {\r\n   toggleGameWinModal();\r\n   timer.clear();\r\n   game.refresh();\r\n});\r\nconst GameOverButton = document.querySelector(\".game-over__button\");\r\nGameOverButton.addEventListener(\"click\", function (event) {\r\n   toggleGameOverModal();\r\n   timer.clear();\r\n   game.refresh();\r\n});\r\n","const game = new Minesweeper(\".field\", {\r\n   rows: 9,\r\n   columns: 9,\r\n   bombs: 10,\r\n   refreshButton: \".options__button--refresh\",\r\n});\r\n\r\n// timer class\r\nclass Timer {\r\n   constructor() {\r\n      this.timer = document.querySelector(\".timer\");\r\n      this.timerMinutes = document.querySelector(\".timer__minutes\");\r\n      this.timerSeconds = document.querySelector(\".timer__seconds\");\r\n      this.interval = null;\r\n\r\n      this.minutes = 0;\r\n      this.seconds = 1;\r\n   }\r\n   start() {\r\n      this.interval = setInterval(() => {\r\n         if (this.seconds > 59) {\r\n            this.minutes++;\r\n            this.seconds %= 60;\r\n         }\r\n         this.minutes %= 60;\r\n\r\n         if (this.minutes <= 9) {\r\n            this.timerMinutes.innerHTML = \"0\" + this.minutes;\r\n         } else this.timerMinutes.innerHTML = this.minutes;\r\n         if (this.seconds <= 9) {\r\n            this.timerSeconds.innerHTML = \"0\" + this.seconds;\r\n         } else this.timerSeconds.innerHTML = this.seconds;\r\n\r\n         this.seconds++;\r\n      }, 1000);\r\n   }\r\n   clear() {\r\n      clearInterval(this.interval);\r\n      this.timerMinutes.innerHTML = \"00\";\r\n      this.timerSeconds.innerHTML = \"00\";\r\n      this.minutes = 0;\r\n      this.seconds = 1;\r\n   }\r\n   stop() {\r\n      clearInterval(this.interval);\r\n   }\r\n}\r\n\r\nconst timer = new Timer();\r\n\r\n// range sliders options\r\nconst rangeSliders = document.querySelectorAll(\".settings__option-slider\");\r\nconst rangeRowsSlider = document.querySelector(\r\n   \".settings__option-slider--rows\"\r\n);\r\nconst rangeColumnsSlider = document.querySelector(\r\n   \".settings__option-slider--columns\"\r\n);\r\nconst rangeBombsSlider = document.querySelector(\r\n   \".settings__option-slider--bombs\"\r\n);\r\n\r\n// maximum bombs count for this field size\r\nconst bombsMaxCount = () => {\r\n   return (game.options.columns - 1) * (game.options.rows - 1);\r\n};\r\n\r\nnoUiSlider.create(rangeRowsSlider, {\r\n   start: 9,\r\n   connect: \"lower\",\r\n   range: {\r\n      min: [9],\r\n      max: [30],\r\n   },\r\n   step: 1,\r\n   tooltips: false,\r\n   format: {\r\n      // 'to' the formatted value. Receives a number.\r\n      to: function (value) {\r\n         return parseInt(value.toFixed(0));\r\n      },\r\n      // 'from' the formatted value.\r\n      // Receives a string, should return a number.\r\n      from: function (value) {\r\n         return value;\r\n      },\r\n   },\r\n});\r\nnoUiSlider.create(rangeColumnsSlider, {\r\n   start: 9,\r\n   connect: \"lower\",\r\n   range: {\r\n      min: [9],\r\n      max: [15],\r\n   },\r\n   step: 1,\r\n   tooltips: false,\r\n   format: {\r\n      // 'to' the formatted value. Receives a number.\r\n      to: function (value) {\r\n         return parseInt(value.toFixed(0));\r\n      },\r\n      // 'from' the formatted value.\r\n      // Receives a string, should return a number.\r\n      from: function (value) {\r\n         return value;\r\n      },\r\n   },\r\n});\r\nnoUiSlider.create(rangeBombsSlider, {\r\n   start: 10,\r\n   connect: \"lower\",\r\n   range: {\r\n      min: 10,\r\n      max: bombsMaxCount(),\r\n   },\r\n   step: 1,\r\n   tooltips: false,\r\n   format: {\r\n      // 'to' the formatted value. Receives a number.\r\n      to: function (value) {\r\n         return parseInt(value.toFixed(0));\r\n      },\r\n      // 'from' the formatted value.\r\n      // Receives a string, should return a number.\r\n      from: function (value) {\r\n         return value;\r\n      },\r\n   },\r\n});\r\n\r\nconst setGameSettings = () => {\r\n   const rows = rangeRowsSlider.noUiSlider.get(),\r\n      columns = rangeColumnsSlider.noUiSlider.get(),\r\n      bombs = rangeBombsSlider.noUiSlider.get();\r\n\r\n   game.resize(rows, columns, bombs);\r\n   game.refresh();\r\n   rangeBombsSlider.noUiSlider.updateOptions({\r\n      range: {\r\n         min: 10,\r\n         max: bombsMaxCount(),\r\n      },\r\n   });\r\n};\r\n\r\nrangeSliders.forEach((rangeSlider) => {\r\n   const sliderValue = rangeSlider.parentElement.querySelector(\".settings__slider-value\");\r\n\r\n   rangeSlider.noUiSlider.on(\"slide\", function () {\r\n      sliderValue.innerText = rangeSlider.noUiSlider.get();\r\n   });\r\n\r\n   let previousValue = rangeSlider.noUiSlider.get();\r\n   rangeSlider.noUiSlider.on(\"change\", function () {\r\n      sliderValue.innerHTML = rangeSlider.noUiSlider.get();\r\n\r\n      const currentValue = rangeSlider.noUiSlider.get();\r\n      if (previousValue != currentValue) {\r\n         timer.clear();\r\n         setGameSettings();\r\n\r\n         closeModals();\r\n      }\r\n      previousValue = currentValue;\r\n   });\r\n});\r\n\r\n// game events example\r\nwindow.addEventListener(\"MS_GameRefresh\", function () {\r\n   closeModals();\r\n   timer.clear();\r\n});\r\n\r\nwindow.addEventListener(\"MS_GameStart\", function () {\r\n   timer.start();\r\n});\r\n\r\nwindow.addEventListener(\"MS_GameWin\", function () {\r\n   toggleGameWinModal();\r\n   timer.stop();\r\n});\r\n\r\nwindow.addEventListener(\"MS_GameOver\", function () {\r\n   toggleGameOverModal();\r\n   timer.stop();\r\n});\r\n"]}